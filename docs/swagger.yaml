basePath: /
definitions:
  controller.AddProductPayload:
    properties:
      client_id:
        format: uuid
        type: string
      comments:
        type: string
      product_id:
        format: uuid
        type: string
      quantity:
        example: 1
        minimum: 1
        type: integer
    required:
    - client_id
    - product_id
    - quantity
    type: object
  controller.CreateOrderPayload:
    properties:
      client_id:
        format: uuid
        type: string
    required:
    - client_id
    type: object
  controller.CustomerPayload:
    properties:
      age:
        maximum: 120
        minimum: 18
        type: integer
      cpf:
        type: string
      email:
        type: string
      name:
        maxLength: 20
        minLength: 5
        type: string
    required:
    - cpf
    - email
    - name
    type: object
  controller.EditProductPayload:
    properties:
      client_id:
        format: uuid
        type: string
      comments:
        type: string
      product_id:
        format: uuid
        type: string
      quantity:
        example: 2
        type: integer
    required:
    - client_id
    - product_id
    - quantity
    type: object
  controller.RemoveProductPayload:
    properties:
      client_id:
        format: uuid
        type: string
      product_id:
        format: uuid
        type: string
    required:
    - client_id
    - product_id
    type: object
  controller.UpdatePayload:
    properties:
      order_id:
        format: uuid
        type: string
      status:
        type: string
    required:
    - order_id
    - status
    type: object
  customer.Customer:
    properties:
      age:
        type: integer
      cpf:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  order.Order:
    properties:
      client_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      status:
        type: string
      total_amount:
        type: number
    type: object
  product.Product:
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
host: localhost:8080
info:
  contact: {}
  description: Fast Food API for FIAP Tech course
  title: Tech Challenge Food API
  version: 0.1.0
paths:
  /cart/add-product:
    post:
      consumes:
      - application/json
      description: Adds a Product to Customer's Cart
      parameters:
      - description: AddProductPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.AddProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: '{\"error\": \"Internal Server Error\"}'
          schema:
            additionalProperties: true
            type: object
      tags:
      - Cart
  /cart/edit-product:
    post:
      consumes:
      - application/json
      description: Edits a Product from Customer's Cart
      parameters:
      - description: EditProductPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.EditProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: '{\"error\": \"Internal Server Error\"}'
          schema:
            additionalProperties: true
            type: object
      tags:
      - Cart
  /cart/remove-product:
    post:
      consumes:
      - application/json
      description: Removes a Product from Customer's Cart
      parameters:
      - description: RemoveProductPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.RemoveProductPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      tags:
      - Cart
  /customer:
    get:
      consumes:
      - application/json
      description: Get all customer's list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customer.Customer'
            type: array
      summary: Get customer list
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create a new customer
      parameters:
      - description: CustomerPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.CustomerPayload'
      produces:
      - application/json
      responses:
        "200":
          description: customer.Customer
          schema:
            $ref: '#/definitions/customer.Customer'
        "400":
          description: '{\"error\": \"Invalid CPF\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Create customer
      tags:
      - Customer
  /customer/{cpf}:
    get:
      consumes:
      - application/json
      description: Get a customer by cpf
      parameters:
      - description: customer cpf
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
        "404":
          description: Customer not found
      summary: Get customer by cpf
      tags:
      - Customer
  /customer/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a customer by id
      parameters:
      - description: "123456789"
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid identifier informed
      summary: Delete customer
      tags:
      - Customer
    put:
      consumes:
      - application/json
      description: Update a customer by id
      parameters:
      - description: ID of the customer
        in: path
        name: id
        required: true
        type: string
      - description: CustomerPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.CustomerPayload'
      produces:
      - application/json
      responses:
        "200":
          description: customer.Customer
          schema:
            $ref: '#/definitions/customer.Customer'
        "400":
          description: '{\"error\": \"Invalid CPF\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Update customer
      tags:
      - Customer
  /orders:
    get:
      consumes:
      - application/json
      description: Get all order's list
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/order.Order'
            type: array
      summary: Get order list
      tags:
      - Order
    post:
      consumes:
      - application/json
      description: Create order from Cart
      parameters:
      - description: CreateOrderPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.CreateOrderPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "500":
          description: '{\"error\": \Internal Server Error\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Create order from Cart
      tags:
      - Order
  /orders/:id:
    patch:
      consumes:
      - application/json
      parameters:
      - description: UpdatePayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controller.UpdatePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "500":
          description: '{\"error\": \Internal Server Error\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Update Order record
      tags:
      - Order
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get an order by ID
      parameters:
      - description: ID of the order
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.Order'
        "400":
          description: '{\"error\": \Invalid identifier informed\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Get order by ID
      tags:
      - Order
  /product:
    get:
      consumes:
      - application/json
      parameters:
      - description: Name of Product
        in: path
        name: search
        type: string
      - description: Category of Product
        in: path
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: product.Product
          schema:
            $ref: '#/definitions/product.Product'
        "500":
          description: '{\"error\": \"something went bad :(\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Search products with given criteria
      tags:
      - Product
  /product/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID of Product
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: '{\"error\": \"something went bad :(\"}'
          schema:
            additionalProperties: true
            type: object
      summary: Delete a Product with given ID
      tags:
      - Product
swagger: "2.0"
